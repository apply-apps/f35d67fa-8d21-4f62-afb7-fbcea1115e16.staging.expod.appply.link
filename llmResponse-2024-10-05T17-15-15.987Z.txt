```js
// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TextInput, Button, Image, ScrollView } from 'react-native';
import { Camera } from 'expo-camera';
import * as Location from 'expo-location';
import { BarCodeScanner } from 'expo-barcode-scanner';
import axios from 'axios';

const API_URL = 'https://apihub.staging.appply.link/chatgpt';

const App = () => {
  const [companyInfo, setCompanyInfo] = useState({
    name: '',
    street: '',
    streetNumber: '',
    zipCode: '',
    city: '',
  });

  const [contactInfo, setContactInfo] = useState({
    name: '',
    email: '',
    phone: '',
  });

  const [meterInfo, setMeterInfo] = useState({
    count: 0,
    location: null,
    timestamp: null,
    meterPhoto: null,
    distancePhoto: null,
    scannedCode: null,
    energyType: '',
  });

  const [cameraPermission, setCameraPermission] = useState(null);
  const [locationPermission, setLocationPermission] = useState(null);
  const [isCameraActive, setIsCameraActive] = useState(false);
  const [isScanning, setIsScanning] = useState(false);

  useEffect(() => {
    (async () => {
      const { status: cameraStatus } = await Camera.requestCameraPermissionsAsync();
      setCameraPermission(cameraStatus === 'granted');

      const { status: locationStatus } = await Location.requestForegroundPermissionsAsync();
      setLocationPermission(locationStatus === 'granted');
    })();
  }, []);

  const handleCompanyInfoChange = (field, value) => {
    setCompanyInfo(prevState => ({ ...prevState, [field]: value }));
  };

  const handleContactInfoChange = (field, value) => {
    setContactInfo(prevState => ({ ...prevState, [field]: value }));
  };

  const handleTakePicture = async (type) => {
    if (cameraPermission) {
      setIsCameraActive(true);
      const photo = await camera.takePictureAsync();
      setIsCameraActive(false);
      setMeterInfo(prevState => ({ ...prevState, [type]: photo.uri }));
    }
  };

  const handleScanCode = async () => {
    setIsScanning(true);
  };

  const handleBarCodeScanned = ({ data }) => {
    setMeterInfo(prevState => ({ ...prevState, scannedCode: data }));
    setIsScanning(false);
  };

  const handleGetLocation = async () => {
    if (locationPermission) {
      const location = await Location.getCurrentPositionAsync({});
      setMeterInfo(prevState => ({
        ...prevState,
        location: `${location.coords.latitude}, ${location.coords.longitude}`,
        timestamp: new Date().toISOString(),
      }));
    }
  };

  const handleSubmit = async () => {
    const data = {
      companyInfo,
      contactInfo,
      meterInfo,
    };

    try {
      const response = await axios.post(API_URL, {
        messages: [
          { role: "system", content: "You are a helpful assistant. Please format the following data for a Google Sheet." },
          { role: "user", content: JSON.stringify(data) }
        ],
        model: "gpt-4o"
      });

      const formattedData = response.data.response;
      console.log('Formatted data for Google Sheet:', formattedData);
      // Here you would typically send this formatted data to your Google Sheet
      // As this is beyond the scope of this example, we're just logging it
    } catch (error) {
      console.error('Error formatting data:', error);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Image
        source={{ uri: 'https://picsum.photos/200/300' }}
        style={styles.logo}
      />
      
      <Text style={styles.header}>Company Information</Text>
      <TextInput
        style={styles.input}
        placeholder="Company Name"
        value={companyInfo.name}
        onChangeText={(text) => handleCompanyInfoChange('name', text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Street"
        value={companyInfo.street}
        onChangeText={(text) => handleCompanyInfoChange('street', text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Street Number"
        value={companyInfo.streetNumber}
        onChangeText={(text) => handleCompanyInfoChange('streetNumber', text)}
      />
      <TextInput
        style={styles.input}
        placeholder="ZIP Code"
        value={companyInfo.zipCode}
        onChangeText={(text) => handleCompanyInfoChange('zipCode', text)}
      />
      <TextInput
        style={styles.input}
        placeholder="City"
        value={companyInfo.city}
        onChangeText={(text) => handleCompanyInfoChange('city', text)}
      />

      <Text style={styles.header}>Contact Information</Text>
      <TextInput
        style={styles.input}
        placeholder="Name"
        value={contactInfo.name}
        onChangeText={(text) => handleContactInfoChange('name', text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={contactInfo.email}
        onChangeText={(text) => handleContactInfoChange('email', text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Phone"
        value={contactInfo.phone}
        onChangeText={(text) => handleContactInfoChange('phone', text)}
      />

      <Text style={styles.header}>Meter Information</Text>
      <Button title="Take Meter Photo" onPress={() => handleTakePicture('meterPhoto')} />
      <Button title="Take Distance Photo" onPress={() => handleTakePicture('distancePhoto')} />
      <Button title="Scan Code" onPress={handleScanCode} />
      <Button title="Get Location" onPress={handleGetLocation} />
      
      <TextInput
        style={styles.input}
        placeholder="Energy Type (Electricity, Heat, Water)"
        value={meterInfo.energyType}
        onChangeText={(text) => setMeterInfo(prevState => ({ ...prevState, energyType: text }))}
      />

      <Button title="Submit" onPress={handleSubmit} />

      {isCameraActive && (
        <Camera
          style={styles.camera}
          type={Camera.Constants.Type.back}
          ref={(ref) => camera = ref}
        />
      )}

      {isScanning && (
        <BarCodeScanner
          onBarCodeScanned={handleBarCodeScanned}
          style={StyleSheet.absoluteFillObject}
        />
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  logo: {
    width: 100,
    height: 100,
    alignSelf: 'center',
    marginBottom: 20,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
  camera: {
    flex: 1,
    aspectRatio: 1,
  },
});

export default App;
// End of App.js
```